name: ImmortalWRT APK Release
on:
  workflow_dispatch:  # 允许手动触发
  push:
    paths:
      - 'openwrt-support/**'  # 当 openwrt-support 路径有更改时触发

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.sdk }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            sdk: x86-64
          - arch: aarch64_cortex-a72
            sdk: mvebu-cortex-a72
    steps:
      - uses: actions/checkout@v4
        with:
          repository: stackia/rtp2httpd
          
      - name: Override version number
        run: |
          RELEASE_TAG="${{ github.ref_name }}"
          RELEASE_VERSION="${RELEASE_TAG#v}"
          # 如果不是从 release 触发，使用日期作为版本号
          if [[ "$RELEASE_TAG" == "$RELEASE_VERSION" ]]; then
            RELEASE_VERSION="$(date +%Y%m%d)"
          fi
          sed -i "s/1\.0\.0/${RELEASE_VERSION}/g" openwrt-support/rtp2httpd/Makefile openwrt-support/luci-app-rtp2httpd/Makefile configure.ac
          
      - name: Move src to openwrt-support
        run: mv openwrt-support ../ && mkdir ../openwrt-support/rtp2httpd/src && mv ./* ../openwrt-support/rtp2httpd/src && mv ../openwrt-support ./
        
      - name: Build
        uses: openwrt/gh-action-sdk@v7
        env:
          ARCH: ${{ matrix.arch }}
          FEED_DIR: ${{ github.workspace }}/openwrt-support
          NO_SHFMT_CHECK: true
          PACKAGES: ${{ matrix.arch == 'x86_64' && 'luci-app-rtp2httpd' || 'rtp2httpd' }}
          BUILD_APK: true  # 启用 APK 构建而不是 IPK
          CONTAINER: openwrt/sdk
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.arch }}-apk-packages
          path: bin/packages/${{ matrix.arch }}/action/*.apk

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-apks
          merge-multiple: true
          
      - name: Display structure of downloaded files
        run: ls -R all-apks
        
      - name: Set release date
        id: release_date
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        
      - name: Create or update release
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
        run: |
          # 打印文件结构以便调试
          echo "Debug: Listing all APK files"
          find all-apks -name "*.apk" -type f || true
          
          # 准备所有 APK 文件的路径
          APK_FILES=$(find all-apks -name "*.apk" -type f | tr '\n' ' ' || echo "")
          
          # 检查是否找到了 APK 文件
          if [ -z "$APK_FILES" ]; then
            echo "警告: 未找到 APK 文件，可能需要检查构建过程"
            APK_FILES="README.md" # 使用占位文件，防止命令失败
            echo "这是一个自动生成的构建版本。APK 文件可能未能正确生成，请检查工作流日志。" > README.md
          fi
          
          # 如果是从标签触发则上传到对应的 release
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
            
            # 检查 release 是否已存在
            if gh release view $TAG --repo ${{ github.repository }} &>/dev/null; then
              echo "Release $TAG already exists, adding files to it"
              gh release upload --repo ${{ github.repository }} $TAG $APK_FILES --clobber
            else
              echo "Creating new release $TAG"
              gh release create $TAG --repo ${{ github.repository }} $APK_FILES --generate-notes
            fi
          else
            # 对于手动触发或 push 触发，使用日期作为标记
            RELEASE_DATE="${{ steps.release_date.outputs.date }}"
            RELEASE_TAG="build-${RELEASE_DATE}"
            RELEASE_NAME="Build-${RELEASE_DATE}"
            
            # 检查 release 是否已存在
            if gh release view $RELEASE_TAG --repo ${{ github.repository }} &>/dev/null; then
              echo "Release $RELEASE_TAG already exists, adding files to it"
              gh release upload --repo ${{ github.repository }} $RELEASE_TAG $APK_FILES --clobber
            else
              echo "Creating new release $RELEASE_TAG"
              gh release create $RELEASE_TAG --title "${RELEASE_NAME}" --repo ${{ github.repository }} $APK_FILES --generate-notes
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
