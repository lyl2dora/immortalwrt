name: ImmortalWRT APK Release
on:
  workflow_dispatch:  # 允许手动触发
  push:
    paths:
      - 'openwrt-support/**'  # 当 openwrt-support 路径有更改时触发

jobs:
  # 首先创建release
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.create_release.outputs.release_tag }}
    steps:
      - name: Set release date
        id: release_date
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        
      - name: Generate release tag and name
        id: create_release
        run: |
          # 获取当前日期和时间，格式为YYYY.MM.DD-HHMM
          CURRENT_DATETIME=$(date '+%Y.%m.%d-%H%M')
          
          # 如果是从标签触发则使用标签名
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            RELEASE_TAG="${{ github.ref_name }}"
          else
            # 对于手动触发或 push 触发，使用日期作为标记
            RELEASE_TAG="build-${{ steps.release_date.outputs.date }}"
          fi
          
          RELEASE_NAME="rtp2httpd-${CURRENT_DATETIME}"
          
          # 输出变量供后续job使用
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          
          # 检查 release 是否已存在
          if gh release view $RELEASE_TAG --repo ${{ github.repository }} &>/dev/null; then
            echo "Release $RELEASE_TAG already exists"
          else
            echo "Creating new release $RELEASE_TAG"
            gh release create $RELEASE_TAG --title "${RELEASE_NAME}" --repo ${{ github.repository }} --generate-notes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 然后构建并直接上传
  build:
    needs: create_release
    name: ${{ matrix.arch }}-${{ matrix.sdk }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            sdk: x86-64
          - arch: aarch64_cortex-a72
            sdk: mvebu-cortex-a72
    steps:
      - uses: actions/checkout@v4
        with:
          repository: stackia/rtp2httpd
          
      - name: Override version number
        run: |
          RELEASE_TAG="${{ needs.create_release.outputs.release_tag }}"
          RELEASE_VERSION="${RELEASE_TAG#v}"
          # 如果不是从 release 触发，使用日期作为版本号
          if [[ "$RELEASE_TAG" == "$RELEASE_VERSION" ]]; then
            RELEASE_VERSION="$(date +%Y%m%d)"
          fi
          sed -i "s/1\.0\.0/${RELEASE_VERSION}/g" openwrt-support/rtp2httpd/Makefile openwrt-support/luci-app-rtp2httpd/Makefile configure.ac
          
      - name: Move src to openwrt-support
        run: mv openwrt-support ../ && mkdir ../openwrt-support/rtp2httpd/src && mv ./* ../openwrt-support/rtp2httpd/src && mv ../openwrt-support ./
        
      - name: Build
        uses: openwrt/gh-action-sdk@v7
        env:
          ARCH: ${{ matrix.arch }}
          FEED_DIR: ${{ github.workspace }}/openwrt-support
          NO_SHFMT_CHECK: true
          PACKAGES: ${{ matrix.arch == 'x86_64' && 'luci-app-rtp2httpd' || 'rtp2httpd' }}
          BUILD_APK: true  # 启用 APK 构建而不是 IPK
          CONTAINER: openwrt/sdk
          
      - name: Upload APK files directly to release
  run: |
    echo "Searching for APK files in bin/packages/${{ matrix.arch }}/action/"
    ls -la bin/packages/${{ matrix.arch }}/action/ || echo "Directory does not exist or is empty"
    
    # 先检查文件是否存在      
    if find bin/packages/${{ matrix.arch }}/action/ -name "*.apk" -type f | grep -q .; then
      echo "Found APK files, uploading to release..."
      # 列出找到的文件
      find bin/packages/${{ matrix.arch }}/action/ -name "*.apk" -type f
      # 使用xargs确保文件名正确传递给gh命令
      find bin/packages/${{ matrix.arch }}/action/ -name "*.apk" -type f -print0 | xargs -0 -I{} gh release upload --repo ${{ github.repository }} ${{ needs.create_release.outputs.release_tag }} "{}" --clobber
    else
      echo "Warning: No APK files found to upload"
      echo "This is an automatically generated build. No APK files were generated." > build-issue.md
      gh release upload --repo ${{ github.repository }} ${{ needs.create_release.outputs.release_tag }} build-issue.md --clobber
    fi
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
